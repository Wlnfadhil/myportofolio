# -*- coding: utf-8 -*-
"""Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lfyiErid6KapibLA8aMQ91_3ewh-d_9q

WILDAN FADHIL NAZARUDDIN
232153079
MACHINE LEARNING
"""

pip install --upgrade pip

!wget https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip

!mkdir my_machine_learning
!mkdir /content/my_machine_learning/train_set
!mkdir /content/my_machine_learning/validation_set

!unzip rockpaperscissors.zip -d /content/my_machine_learning
!rm rockpaperscissors.zip

import os

# Definisikan path ke direktori sumber data
base_dir = '/content/my_machine_learning/rockpaperscissors'
categories = ['rock', 'paper', 'scissors']

# Definisikan path ke direktori train dan validation
train_dir = '/content/my_machine_learning/train_set'
validation_dir = '/content/my_machine_learning/validation_set'

# Tentukan proporsi untuk train set dan validation set
train_ratio = 0.6
validation_ratio = 0.4

# Loop melalui setiap kategori dan bagi data sesuai proporsi yang diinginkan
for category in categories:
    category_dir = os.path.join(base_dir, category)
    images = os.listdir(category_dir)
    num_images = len(images)

    # Hitung jumlah gambar untuk train set dan validation set
    num_train = int(train_ratio * num_images)
    num_validation = num_images - num_train

    # Bagi ulang data berdasarkan proporsi yang diinginkan
    train_images = images[:num_train]
    validation_images = images[num_train:num_train + num_validation]

    # Pindahkan data ke direktori train set
    for image in train_images:
        src = os.path.join(category_dir, image)
        dst = os.path.join(train_dir, category, image)
        os.makedirs(os.path.dirname(dst), exist_ok=True)  # Buat direktori tujuan jika belum ada
        os.rename(src, dst)  # Pindahkan file ke train_dir

    # Pindahkan data ke direktori validation set
    for image in validation_images:
        src = os.path.join(category_dir, image)
        dst = os.path.join(validation_dir, category, image)
        os.makedirs(os.path.dirname(dst), exist_ok=True)  # Buat direktori tujuan jika belum ada
        os.rename(src, dst)  # Pindahkan file ke validation_dir

    # Hapus sisa file yang tidak dipindahkan (jika ada)
    for remaining_image in os.listdir(category_dir):
        remaining_src = os.path.join(category_dir, remaining_image)
        os.remove(remaining_src)  # Hapus file yang tidak dipindahkan

print("Pembagian data ulang telah selesai.")

import os

train_dir = '/content/my_machine_learning/train_set'
validation_dir = '/content/my_machine_learning/validation_set'

def count_files(directory):
    count_rock = len(os.listdir(os.path.join(directory, 'rock')))
    count_paper = len(os.listdir(os.path.join(directory, 'paper')))
    count_scissors = len(os.listdir(os.path.join(directory, 'scissors')))
    return count_rock, count_paper, count_scissors

train_rock, train_paper, train_scissors = count_files(train_dir)
validation_rock, validation_paper, validation_scissors = count_files(validation_dir)

print("Train Set:")
print(f"Rock: {train_rock}")
print(f"Paper: {train_paper}")
print(f"Scissors: {train_scissors}")

print("\nValidation Set:")
print(f"Rock: {validation_rock}")
print(f"Paper: {validation_paper}")
print(f"Scissors: {validation_scissors}")

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Inisialisasi objek ImageDataGenerator untuk augmentasi data pada set pelatihan
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest')

# Inisialisasi objek ImageDataGenerator untuk rescaling pada set validasi
validation_datagen = ImageDataGenerator(rescale=1./255)

# Menggunakan objek ImageDataGenerator untuk memuat data latih dari direktori train
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical')

# Menggunakan objek ImageDataGenerator untuk memuat data validasi dari direktori validation
validation_generator = validation_datagen.flow_from_directory(
    validation_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical')

print("Augmentasi gambar telah diimplementasikan.")

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Inisialisasi model sequential
model = Sequential()

# Tambahkan layer konvolusi pertama
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
model.add(MaxPooling2D(2, 2))

# Tambahkan layer konvolusi kedua
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(2, 2))

# Tambahkan layer konvolusi ketiga
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D(2, 2))

# Tambahkan layer flatten
model.add(Flatten())

# Tambahkan layer dense
model.add(Dense(512, activation='relu'))

# Tambahkan layer output
model.add(Dense(3, activation='softmax'))



# Tampilkan ringkasan model
model.summary()

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Augmentasi dan preprocessing data latihan
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Preprocessing data validasi
validation_datagen = ImageDataGenerator(rescale=1./255)
# Path ke direktori data latihan dan data validasi
train_dir = '/content/my_machine_learning/train_set'
validation_dir = '/content/my_machine_learning/validation_set'

# Muat data latihan menggunakan ImageDataGenerator
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

# Muat data validasi menggunakan ImageDataGenerator
validation_generator = validation_datagen.flow_from_directory(
    validation_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

# Inisialisasi model sequential
model = Sequential()

# Tambahkan layer konvolusi dan max pooling
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
model.add(MaxPooling2D(2, 2))

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(2, 2))

model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D(2, 2))

# Flatten hasil dari layer sebelumnya menjadi input untuk fully connected layer
model.add(Flatten())

# Tambahkan fully connected layers
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(3, activation='softmax'))  # 3 output untuk kelas rock, paper, scissors

# Compile model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Latih model menggunakan data latihan dan validasi
history = model.fit(
    train_generator,
    steps_per_epoch=len(train_generator),
    epochs=5,
    validation_data=validation_generator,
    validation_steps=len(validation_generator)
)
# Evaluasi model pada data validasi
model.evaluate(validation_generator)

from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

# Unggah gambar ke Colab
uploaded = files.upload()

# Proses gambar yang diunggah
for filename in uploaded.keys():
    # Baca gambar dan ubah ukuran menjadi 150x150 piksel
    img_path = '/content/' + filename
    img = image.load_img(img_path, target_size=(150, 150))
    # Ubah gambar menjadi array numpy
    img_array = image.img_to_array(img)
    # Normalisasi nilai piksel
    img_array /= 255.0
    # Perluas dimensi gambar menjadi (1, 150, 150, 3)
    img_array = np.expand_dims(img_array, axis=0)
    # Lakukan prediksi menggunakan model
    prediction = model.predict(img_array)
    # Dapatkan kelas prediksi
    if prediction[0][0] > prediction[0][1]:
        class_name = 'paper'
    elif prediction[0][1] > prediction[0][2]:
        class_name = 'rock'
    else:
        class_name = 'scissors'
    # Tampilkan hasil prediksi
    plt.imshow(img)
    plt.axis('off')
    plt.title(f'Prediction: {class_name}')
    plt.show()